{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', dtypes.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array';\nimport isCollection from '@stdlib/assert-is-collection';\nimport contains from '@stdlib/array-base-assert-contains';\nimport filledBy from '@stdlib/array-base-filled-by';\nimport nullary from '@stdlib/strided-base-nullary';\nimport ctors from '@stdlib/array-ctors';\nimport format from '@stdlib/string-format';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Constructor for creating arrays filled with pseudorandom values drawn from a nullary PRNG.\n*\n* @constructor\n* @param {Function} prng - nullary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output data types\n* @param {string} dtype - default output data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported data type\n* @returns {Random} instance\n*\n* @example\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var v = rand.generate( 10 );\n* // returns <Float64Array>\n*/\nfunction Random( prng, dtypes, dtype ) {\n\tif ( !( this instanceof Random ) ) {\n\t\treturn new Random( prng, dtypes, dtype );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of strings. Value: `%s`.', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\tthis._prng = prng;\n\tthis._dtypes = dtypes;\n\tthis._dtype = dtype;\n\treturn this;\n}\n\n/**\n* Returns an array filled with pseudorandom values drawn from a nullary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeInteger} len - number of elements\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Collection} output array\n*\n* @example\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var v = rand.generate( 10 );\n* // returns <Float64Array>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( len, options ) {\n\tvar ctor;\n\tvar opts;\n\tvar out;\n\tvar err;\n\tvar dt;\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, this._dtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdt = opts.dtype || this._dtype;\n\tif ( dt === 'generic' ) {\n\t\treturn filledBy( len, this._prng );\n\t}\n\tctor = ctors( dt );\n\tout = new ctor( len );\n\tnullary( [ out ], [ len ], [ 1 ], this._prng );\n\treturn out;\n});\n\n/**\n* Fills an array with pseudorandom values drawn from a nullary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {Collection} out - output array\n* @throws {TypeError} first argument must be a collection\n* @returns {Collection} output array\n*\n* @example\n* import exponential from '@stdlib/random-base-exponential';\n* import zeros from '@stdlib/array-zeros';\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n* var defaultDType = 'float64';\n*\n* var rand = new Random( exponential.factory( 2.0 ), dtypes, defaultDType );\n*\n* var out = zeros( 10, 'float64' );\n* // returns <Float64Array>\n*\n* var v = rand.assign( out );\n* // returns <Float64Array>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( out ) {\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\tnullary( [ out ], [ out.length ], [ 1 ], this._prng );\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Random;\n"],"names":["validate","opts","dtypes","options","isObject","hasOwnProp","dtype","contains","TypeError","format","join","Random","prng","this","isFunction","isStringArray","_prng","_dtypes","_dtype","setReadOnly","prototype","len","out","err","dt","isNonNegativeInteger","arguments","length","filledBy","ctors","nullary","isCollection"],"mappings":";;8qCAmDA,SAASA,EAAUC,EAAMC,EAAQC,GAChC,OAAMC,EAAUD,GAGXE,EAAYF,EAAS,WACzBF,EAAKK,MAAQH,EAAQG,OACfC,EAAUL,EAAQD,EAAKK,QACrB,IAAIE,UAAWC,EAAQ,gFAAiF,QAASP,EAAOQ,KAAM,QAAUT,EAAKK,QAG/I,KARC,IAAIE,UAAWC,EAAQ,qEAAsEN,GAStG,CCAA,SAASQ,EAAQC,EAAMV,EAAQI,GAC9B,KAAQO,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,EAAMV,EAAQI,GAElC,IAAMQ,EAAYF,GACjB,MAAM,IAAIJ,UAAWC,EAAQ,oEAAqEG,IAGnG,IAAMG,EAAeb,GACpB,MAAM,IAAIM,UAAWC,EAAQ,8EAA+EP,IAG7G,IAAMK,EAAUL,EAAQI,GACvB,MAAM,IAAIE,UAAWC,EAAQ,+EAAgFH,IAK9G,OAHAO,KAAKG,MAAQJ,EACbC,KAAKI,QAAUf,EACfW,KAAKK,OAASZ,EACPO,IACR,CA2BAM,EAAaR,EAAOS,UAAW,YAAY,SAAmBC,EAAKlB,GAClE,IACIF,EACAqB,EACAC,EACAC,EACJ,IAAMC,EAAsBJ,GAC3B,MAAM,IAAIb,UAAWC,EAAQ,+EAAgFY,IAG9G,GADApB,EAAO,CAAA,EACFyB,UAAUC,OAAS,IACvBJ,EAAMvB,EAAUC,EAAMY,KAAKI,QAASd,IAEnC,MAAMoB,EAIR,MAAY,aADZC,EAAKvB,EAAKK,OAASO,KAAKK,QAEhBU,EAAUP,EAAKR,KAAKG,QAG5BM,EAAM,IADCO,EAAOL,GACR,CAAUH,GAChBS,EAAS,CAAER,GAAO,CAAED,GAAO,CAAE,GAAKR,KAAKG,OAChCM,EACR,IA8BAH,EAAaR,EAAOS,UAAW,UAAU,SAAiBE,GACzD,IAAMS,EAAcT,GACnB,MAAM,IAAId,UAAWC,EAAQ,8EAA+Ea,IAG7G,OADAQ,EAAS,CAAER,GAAO,CAAEA,EAAIK,QAAU,CAAE,GAAKd,KAAKG,OACvCM,CACR"}